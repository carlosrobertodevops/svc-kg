openapi: 3.0.3
info:
  title: svc-kg
  version: 1.7.9
  description: |
    Microserviço de Knowledge Graph (membros, facções, funções).
    Endpoints de dados (JSON) e visualização (PyVis/vis.js).
servers:
- url: /
paths:
  /live:
    get:
      summary: Liveness
      responses:
        '200':
          description: ok
  /ready:
    get:
      summary: Readiness (DNS/Redis/backend)
      responses:
        '200':
          description: pronto
        '503':
          description: indisponível
  /health:
    get:
      summary: Health estático
      responses:
        '200':
          description: ok
  /debug/config:
    get:
      summary: Config sanitizada
      responses:
        '200':
          description: ok
  /v1/graph/membros:
    get:
      summary: Grafo (via et_graph_membros/get_graph_membros)
      parameters:
      - in: query
        name: faccao_id
        schema: { type: integer, nullable: true }
      - in: query
        name: include_co
        schema: { type: boolean, default: true }
      - in: query
        name: max_pairs
        schema: { type: integer, default: 8000, minimum: 1, maximum: 200000 }
      - in: query
        name: max_nodes
        schema: { type: integer, default: 2000, minimum: 100, maximum: 20000 }
      - in: query
        name: max_edges
        schema: { type: integer, default: 4000, minimum: 100, maximum: 200000 }
      - in: query
        name: cache
        schema: { type: boolean, default: true }
      responses:
        '200':
          description: Grafo
  /graph/members:
    get:
      summary: Compatível com p_* (mesmo do /v1/graph/membros)
      parameters:
      - in: query
        name: p_faccao_id
        schema: { type: integer, nullable: true }
      - in: query
        name: p_include_co
        schema: { type: boolean, default: true }
      - in: query
        name: p_max_pairs
        schema: { type: integer, default: 8000 }
      responses:
        '200':
          description: Grafo
  /v1/nodes/{node_id}/neighbors:
    get:
      summary: Subgrafo (vizinhança raio=1)
      parameters:
      - in: path
        name: node_id
        required: true
        schema: { type: string }
      - in: query
        name: include_co
        schema: { type: boolean, default: true }
      - in: query
        name: max_pairs
        schema: { type: integer, default: 3000 }
      responses:
        '200':
          description: Subgrafo
  /v1/vis/pyvis:
    get:
      summary: Visualização PyVis (inline)
      parameters:
      - in: query
        name: faccao_id
        schema: { type: integer, nullable: true }
      - in: query
        name: include_co
        schema: { type: boolean, default: true }
      - in: query
        name: max_pairs
        schema: { type: integer, default: 8000 }
      - in: query
        name: theme
        schema: { type: string, enum: [ light, dark ], default: light }
      responses:
        '200':
          description: HTML
  /v1/vis/pyvis2:
    get:
      summary: Visualização PyVis com NetworkX (centralidade + comunidades)
      parameters:
      - in: query
        name: faccao_id
        schema: { type: integer, nullable: true }
      - in: query
        name: include_co
        schema: { type: boolean, default: true }
      - in: query
        name: max_pairs
        schema: { type: integer, default: 8000 }
      - in: query
        name: theme
        schema: { type: string, enum: [ light, dark ], default: light }
      - in: query
        name: metric
        schema: { type: string, enum: [ degree, betweenness ], default: degree }
      - in: query
        name: communities
        schema: { type: boolean, default: true }
      responses:
        '200':
          description: HTML
  /v1/vis/visjs:
    get:
      summary: Visualização vis-network (server-embed + fallback inline)
      parameters:
      - in: query
        name: faccao_id
        schema: { type: integer, nullable: true }
      - in: query
        name: include_co
        schema: { type: boolean, default: true }
      - in: query
        name: max_pairs
        schema: { type: integer, default: 8000 }
      - in: query
        name: source
        schema: { type: string, enum: [ server, client ], default: server }
      - in: query
        name: theme
        schema: { type: string, enum: [ light, dark ], default: light }
      responses:
        '200':
          description: HTML
