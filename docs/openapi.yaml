# =============================================================================
# Arquivo: docs/openapi.yaml
# Versão: v1.7.20
# Objetivo: Especificação OpenAPI do micro-serviço svc-kg (graph + vis + ops)
# Funções/métodos:
# - /v1/graph/membros: retorna grafo (nós/arestas) normalizado e deduplicado
# - /v1/vis/visjs: página HTML com vis-network (dados embutidos ou fetch, busca, cores CV/PCC/funções, arestas finas)
# - /v1/vis/pyvis: página HTML com PyVis (arestas finas, repulsão, busca, cores CV/PCC/funções)
# - /live /health /ready /ops/status: sondas e status operacional
# =============================================================================
openapi: 3.1.0
info:
    title: svc-kg
    version: v1.7.20
    description: |
        Micro serviço de Knowledge Graph (vis.js / PyVis).
        - **svc-kg** (também referido como **“sic-kg”**)
        - Visualizações com cores:
          - **CV**: vermelho (nós + membros)
          - **PCC** (quando o nome da facção contém “PCC”): azul escuro (nós + membros)
          - **Funções**: nós e arestas em **amarelo**
        - Arestas finas (width=1) e busca com destaque (reduz opacidade dos demais).

servers:
  - url: /

tags:
  - name: graph
    description: Endpoints de dados brutos do grafo.
  - name: viz
    description: Visualizações do grafo (vis.js / PyVis).
  - name: ops
    description: Operação & saúde do micro-serviço (Coolify, Supabase, Redis).

paths:
    /v1/graph/membros:
        get:
            tags: [ graph ]
            summary: Retorna grafo (nodes/edges)
            description: |
                Retorna um objeto `{ nodes, edges }` já **normalizado** e **deduplicado**:
                - IDs convertidos para string;
                - Labels normalizados (arrays do Postgres -> string);
                - **Nó** duplicado por `id` é mesclado (preserva foto e maior `size`);
                - **Aresta** duplicada é removida pelo par `(source,target,relation)`;
                - Arestas para nós ausentes são removidas;
                - É possível limitar com `max_nodes` e `max_edges`.
            parameters:
              - in: query
                name: faccao_id
                schema: { type: integer, nullable: true }
              - in: query
                name: include_co
                schema: { type: boolean, default: true }
              - in: query
                name: max_pairs
                schema: { type: integer, default: 8000, minimum: 1, maximum: 200000 }
              - in: query
                name: max_nodes
                schema: { type: integer, default: 2000, minimum: 100, maximum: 20000 }
              - in: query
                name: max_edges
                schema: { type: integer, default: 4000, minimum: 100, maximum: 200000 }
              - in: query
                name: cache
                schema: { type: boolean, default: true }
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    nodes:
                                        type: array
                                        items:
                                            type: object
                                            description: "Node com {id, label, type, group, size?, faccao_id?, photo_url?}"
                                    edges:
                                        type: array
                                        items:
                                            type: object
                                            description: "Edge com {source, target, weight?, relation?}"

    /v1/vis/visjs:
        get:
            tags: [ viz ]
            summary: Visualização vis-network (HTML)
            description: |
                Gera uma página **HTML** com `vis-network`:
                - Quando `source=server` (padrão) os dados `{nodes,edges}` vêm **embutidos** em `<script id="__KG_DATA__">` e **não** são rebaixados via HTTP;
                - Quando `source=client`, a página faz `GET /v1/graph/membros` com os mesmos parâmetros de filtragem;
                - Busca com destaque no topo: esmaece nós que não combinam e dá `fit()` nos resultados;
                - **Cores**: **CV** vermelho; facções com “**PCC**” em azul escuro; **funções** em amarelo (nós e arestas);
                - Arestas **finas** (`width=1`); fotos em nós (quando `photo_url` http/https);
                - Física é desativada após estabilização (arrastar um nó não desloca o grafo inteiro).
            parameters:
              - in: query
                name: faccao_id
                schema: { type: integer, nullable: true }
              - in: query
                name: include_co
                schema: { type: boolean, default: true }
              - in: query
                name: max_pairs
                schema: { type: integer, default: 8000 }
              - in: query
                name: max_nodes
                schema: { type: integer, default: 2000 }
              - in: query
                name: max_edges
                schema: { type: integer, default: 4000 }
              - in: query
                name: cache
                schema: { type: boolean, default: true }
              - in: query
                name: theme
                schema: { type: string, enum: [ light, dark ], default: light }
              - in: query
                name: title
                schema: { type: string, default: "Knowledge Graph (vis.js)" }
              - in: query
                name: debug
                schema: { type: boolean, default: false }
              - in: query
                name: source
                schema: { type: string, enum: [ server, client ], default: server }
            responses:
                "200": { description: HTML }

    /v1/vis/pyvis:
        get:
            tags: [ viz ]
            summary: Visualização PyVis (HTML)
            description: |
                Gera uma página **HTML** com `pyvis`:
                - Arestas **finas** (`width=1`), repulsão ajustada e `fit()` inicial;
                - Busca com destaque (esmaece os demais), mesma semântica da versão vis.js;
                - **Cores**: CV vermelho; “PCC” azul escuro; **funções** amarelo (nós/arestas);
                - Fotos exibidas em nós quando `photo_url` http/https.
            parameters:
              - in: query
                name: faccao_id
                schema: { type: integer, nullable: true }
              - in: query
                name: include_co
                schema: { type: boolean, default: true }
              - in: query
                name: max_pairs
                schema: { type: integer, default: 8000 }
              - in: query
                name: max_nodes
                schema: { type: integer, default: 2000 }
              - in: query
                name: max_edges
                schema: { type: integer, default: 4000 }
              - in: query
                name: cache
                schema: { type: boolean, default: true }
              - in: query
                name: theme
                schema: { type: string, enum: [ light, dark ], default: light }
              - in: query
                name: title
                schema: { type: string, default: "Knowledge Graph (PyVis)" }
              - in: query
                name: debug
                schema: { type: boolean, default: false }
            responses:
                "200": { description: HTML }

    /live:
        get:
            tags: [ ops ]
            summary: Liveness
            description: Retorna "ok" se o processo está vivo.
            responses: { "200": { description: OK, content: { text/plain: {} } } }

    /health:
        get:
            tags: [ ops ]
            summary: Health check
            description: |
                Verifica Redis (ping) e backend (Supabase) configurado.
                Use `?deep=true` para executar um RPC real no Supabase e validar conectividade ativa.
            parameters:
              - in: query
                name: deep
                schema: { type: boolean, default: false }
                description: "Se true, executa RPC no Supabase e ping no Redis."
            responses:
                "200": { description: OK }
                "503": { description: Serviço degradado }

    /ready:
        get:
            tags: [ ops ]
            summary: Readiness
            description: Teste ativo de Redis e RPC curto no Supabase (pronto para tráfego).
            responses:
                "200": { description: OK }
                "503": { description: Não pronto }

    /ops/status:
        get:
            tags: [ ops ]
            summary: Status operacional (humano/automação)
            description: |
                Retorna informações do ambiente (Coolify/container), Redis, Supabase (sem expor segredos),
                versão, hostname e parâmetros principais de CORS.
            responses:
                "200": { description: OK }
