
---

## üßæ `docs/openapi.yaml` (Swagger est√°tico)

```yaml
openapi: 3.0.3
info:
  title: svc-kg
  version: "1.3.0"
  description: >
    Microservi√ßo de Knowledge Graph (membros, fac√ß√µes, fun√ß√µes).
    A UI /docs deste servi√ßo carrega este arquivo, se presente.
servers:
  - url: /
paths:
  /health:
    get:
      summary: Health check
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  service: { type: string }
                  env: { type: string }
                  cache: { type: string }
                  backend: { type: string }
  /v1/graph/membros:
    get:
      summary: Retorna grafo (via et_graph_membros/get_graph_membros)
      parameters:
        - name: faccao_id
          in: query
          required: false
          schema: { type: integer, format: int64, nullable: true }
        - name: include_co
          in: query
          required: false
          schema: { type: boolean, default: true }
        - name: max_pairs
          in: query
          required: false
          schema: { type: integer, default: 8000, minimum: 1, maximum: 200000 }
        - name: max_nodes
          in: query
          required: false
          schema: { type: integer, default: 2000, minimum: 100, maximum: 20000 }
        - name: max_edges
          in: query
          required: false
          schema: { type: integer, default: 4000, minimum: 100, maximum: 200000 }
        - name: cache
          in: query
          required: false
          schema: { type: boolean, default: true }
      responses:
        "200":
          description: Grafo
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                  edges:
                    type: array
                    items:
                      $ref: '#/components/schemas/Edge'
  /v1/nodes/{node_id}/neighbors:
    get:
      summary: Subgrafo de vizinhan√ßa (raio=1)
      parameters:
        - name: node_id
          in: path
          required: true
          schema: { type: string }
        - name: include_co
          in: query
          required: false
          schema: { type: boolean, default: true }
        - name: max_pairs
          in: query
          required: false
          schema: { type: integer, default: 3000 }
      responses:
        "200":
          description: Subgrafo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphResponse'
components:
  schemas:
    Node:
      type: object
      required: [id, label, type]
      properties:
        id: { type: string }
        label: { type: string }
        type: { type: string, enum: [membro, faccao, funcao] }
        group: { type: integer, nullable: true }
        size: { type: number, format: float, nullable: true }
    Edge:
      type: object
      required: [source, target]
      properties:
        source: { type: string }
        target: { type: string }
        relation: { type: string, nullable: true }
        weight: { type: number, format: float, nullable: true }
    GraphResponse:
      type: object
      required: [nodes, edges]
      properties:
        nodes: { type: array, items: { $ref: '#/components/schemas/Node' } }
        edges: { type: array, items: { $ref: '#/components/schemas/Edge' } }
