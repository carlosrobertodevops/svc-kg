# =============================================================================
# Arquivo: docker-compose.yaml
# Versão: v1.7.20
# Objetivo: Orquestração (Coolify) — INALTERADO
# Funções/métodos:
# - Serviço redis e svc-kg com healthcheck /live
# =============================================================================
services:
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - obs_net

  svc-kg:
    build:
      context: .
      dockerfile: Dockerfile
    image: svc-kg:latest
    env_file:
      - .env
    environment:
      APP_ENV: production
      PORT: 8080
      WORKERS: 2
      LOG_LEVEL: info

      CORS_ALLOW_ORIGINS: "*"
      CORS_ALLOW_CREDENTIALS: "false"
      CORS_ALLOW_HEADERS: "Authorization,Content-Type"
      CORS_ALLOW_METHODS: "GET,POST,OPTIONS"

      # No Coolify você usará SUPABASE_*
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      SUPABASE_RPC_FN: ${SUPABASE_RPC_FN:-get_graph_membros}
      SUPABASE_TIMEOUT: ${SUPABASE_TIMEOUT:-15}

      CACHE_STATIC_MAX_AGE: ${CACHE_STATIC_MAX_AGE:-86400}
      CACHE_API_TTL: ${CACHE_API_TTL:-60}

      ENABLE_REDIS_CACHE: "true"
      REDIS_URL: "redis://redis:6379/0"

      SERVER_CMD: gunicorn
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./assets:/app/assets
      - ./static:/app/static
      - ./docs:/app/docs:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - obs_net

networks:
  obs_net:
    external: true
