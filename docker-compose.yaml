version: "3.9"

services:
  svc-kg:
    # O Coolify vai clonar o repositório e construir a imagem a partir do Dockerfile na raiz
    build:
      context: .
      dockerfile: Dockerfile
    container_name: svc-kg
    restart: unless-stopped

    # NÃO use "ports" no Coolify; apenas expose
    expose:
      - "8080"

    environment:
      # Ajuste pelo UI do Coolify (ou use .env no repo)
      APP_NAME: ${APP_NAME:-svc-kg}
      DATABASE_URL: ${DATABASE_URL:postgresql://svc_kg:@sgv-kg01@supabase-db:5432/postgres?sslmode=disable} # Ex.: postgresql://svc_kg:***@<host>:5432/postgres?sslmode=require
      WEB_CONCURRENCY: ${WEB_CONCURRENCY:-4}
      DB_POOL_MAX: ${DB_POOL_MAX:-20}
      CACHE_TTL: ${CACHE_TTL:-30}
      # (Opcional) Se quiser proteger com API Key, ative no app.py e defina aqui:
      # API_KEY: ${API_KEY}

    # Healthcheck interno (sem curl/wget) usando o Python já presente na imagem
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - <<'PY'\nimport urllib.request,sys\ntry:\n  urllib.request.urlopen('http://localhost:8080/health', timeout=3)\n  sys.exit(0)\nexcept Exception:\n  sys.exit(1)\nPY",
        ]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 20s

    # O Coolify conecta o serviço na rede do proxy automaticamente; se sua instância exigir rede explícita:
    # networks:
    #   - coolify
# Se sua instância do Coolify exigir rede explícita, descomente aqui e ajuste o nome:
# networks:
#   coolify:
#     external: true
#     name: coolify-infra   # ou "coolify-overlay" / veja em: docker network ls | grep coolify
