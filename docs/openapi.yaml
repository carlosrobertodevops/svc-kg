openapi: 3.0.3
info:
  title: svc-kg
  version: "1.4.0"
  description: >
    Microserviço de Knowledge Graph (membros, facções, funções).
servers: [ { url: / } ]
paths:
  /live:
    get:
      summary: Liveness
      responses: { "200": { description: ok } }
  /ready:
    get:
      summary: Readiness (checa Redis e backend)
      responses:
        "200": { description: pronto }
        "503": { description: dependências indisponíveis }
  /health:
    get:
      summary: Health (estático)
      responses: { "200": { description: ok } }
  /v1/graph/membros:
    get:
      summary: Grafo (via et_graph_membros/get_graph_membros)
      parameters:
      - { name: faccao_id, in: query, required: false, schema: { type: integer, format: int64, nullable: true } }
      - { name: include_co, in: query, required: false, schema: { type: boolean, default: true } }
      - { name: max_pairs, in: query, required: false, schema: { type: integer, default: 8000 } }
      - { name: max_nodes, in: query, required: false, schema: { type: integer, default: 2000 } }
      - { name: max_edges, in: query, required: false, schema: { type: integer, default: 4000 } }
      - { name: cache, in: query, required: false, schema: { type: boolean, default: true } }
      responses: { "200": { description: ok } }
  /graph/members:
    get:
      summary: (Compat) Mesmo de /v1/graph/membros porém com p_* params
      parameters:
      - { name: p_faccao_id, in: query, required: false, schema: { type: integer, format: int64, nullable: true } }
      - { name: p_include_co, in: query, required: false, schema: { type: boolean, default: true } }
      - { name: p_max_pairs, in: query, required: false, schema: { type: integer, default: 8000 } }
      - { name: max_nodes, in: query, required: false, schema: { type: integer, default: 2000 } }
      - { name: max_edges, in: query, required: false, schema: { type: integer, default: 4000 } }
      - { name: cache, in: query, required: false, schema: { type: boolean, default: true } }
      responses: { "200": { description: ok } }
  /v1/nodes/{node_id}/neighbors:
    get:
      summary: Subgrafo (raio=1)
      parameters:
      - { name: node_id, in: path, required: true, schema: { type: string } }
      - { name: include_co, in: query, required: false, schema: { type: boolean, default: true } }
      - { name: max_pairs, in: query, required: false, schema: { type: integer, default: 3000 } }
      responses: { "200": { description: ok } }
components:
  schemas:
    Node:
      type: object
      required: [ id, label, type ]
      properties:
        id: { type: string }
        label: { type: string }
        type: { type: string, enum: [ membro, faccao, funcao ] }
        group: { type: integer, nullable: true }
        size: { type: number, format: float, nullable: true }
    Edge:
      type: object
      required: [ source, target ]
      properties:
        source: { type: string }
        target: { type: string }
        relation: { type: string, nullable: true }
        weight: { type: number, format: float, nullable: true }
    GraphResponse:
      type: object
      required: [ nodes, edges ]
      properties:
        nodes: { type: array, items: { $ref: "#/components/schemas/Node" } }
        edges: { type: array, items: { $ref: "#/components/schemas/Edge" } }
