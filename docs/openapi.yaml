openapi: 3.0.3
info:
    title: svc-kg
    version: 1.7.13
    description: |
        Microserviço de Knowledge Graph com viewers vis.js e PyVis.

        **Status & Health**
        - `/health` (200 ok)
        - `/live` (200 alive)
        - `/ready` (verifica backend e cache)
        - `/status` (JSON detalhado de ambiente, cache e backend)

        **Viewers com busca embutida (UI)**
        - `/v1/vis/visjs` (alias: `/visjs`)
        - `/v1/vis/pyvis` (alias: `/pyvis`)

        **API JSON**
        - `/v1/graph/membros` (alias: `/membros`)

        **Autenticação Supabase/PostgREST**
        - O cliente tenta automaticamente: `SERVICE_KEY` → `ANON_KEY` → `SUPABASE_KEY` → **sem** Authorization.
        - Também tenta duas assinaturas de RPC: `p_faccao_id/p_include_co/p_max_pairs` e `faccao_id/include_co/max_pairs`.

        **Esquema YAML:** `/openapi.yaml` | **Swagger UI:** `/docs` | **Redoc:** `/redoc`
servers:
  - url: https://kg.mondaha.com
paths:
    /health:
        get:
            summary: Healthcheck simples
            responses:
                '200':
                    description: ok
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: ok
    /live:
        get:
            summary: Liveness probe
            responses:
                '200':
                    description: alive
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: alive
    /ready:
        get:
            summary: Readiness (backend/cache)
            responses:
                '200':
                    description: pronto
                    content:
                        application/json:
                            schema:
                                type: object
                '503':
                    description: indisponível
    /status:
        get:
            summary: Status detalhado do microserviço
            responses:
                '200':
                    description: status json
                    content:
                        application/json:
                            schema:
                                type: object
    /v1/graph/membros:
        get:
            summary: Grafo (JSON)
            parameters:
              - in: query
                name: faccao_id
                schema: { type: integer, nullable: true }
              - in: query
                name: include_co
                schema: { type: boolean, default: true }
              - in: query
                name: max_pairs
                schema: { type: integer, default: 8000, minimum: 1, maximum: 200000 }
              - in: query
                name: cache
                schema: { type: boolean, default: true }
              - in: query
                name: max_nodes
                schema: { type: integer, default: 2000, minimum: 100, maximum: 20000 }
              - in: query
                name: max_edges
                schema: { type: integer, default: 4000, minimum: 100, maximum: 200000 }
            responses:
                '200':
                    description: grafo em formato {nodes, edges}
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    nodes:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                id: { type: string }
                                                label: { type: string }
                                                type: { type: string }
                                                group: { type: string }
                                                size: { type: number, nullable: true }
                                                photo_url: { type: string, nullable: true }
                                    edges:
                                        type: array
                                        items:
                                            type: object
                                            properties:
                                                source: { type: string }
                                                target: { type: string }
                                                weight: { type: number }
                                                relation: { type: string }
                '502':
                    description: backend indisponível/erro no RPC (mensagem detalhada em `detail`)
    /v1/vis/visjs:
        get:
            summary: Visualização vis-network (com busca, fotos, CV/PCC)
            parameters:
              - in: query
                name: faccao_id
                schema: { type: integer, nullable: true }
              - in: query
                name: include_co
                schema: { type: boolean, default: true }
              - in: query
                name: max_pairs
                schema: { type: integer, default: 8000 }
              - in: query
                name: max_nodes
                schema: { type: integer, default: 2000 }
              - in: query
                name: max_edges
                schema: { type: integer, default: 4000 }
              - in: query
                name: cache
                schema: { type: boolean, default: true }
              - in: query
                name: theme
                schema: { type: string, enum: [ light, dark ], default: light }
              - in: query
                name: title
                schema: { type: string, default: "Knowledge Graph (vis.js)" }
              - in: query
                name: debug
                schema: { type: boolean, default: false }
              - in: query
                name: source
                schema: { type: string, enum: [ server, client ], default: server }
            responses:
                '200':
                    description: HTML interativo (vis.js)
                    content:
                        text/html: {}
    /v1/vis/pyvis:
        get:
            summary: Visualização PyVis (com busca, fotos, CV/PCC)
            parameters:
              - in: query
                name: faccao_id
                schema: { type: integer, nullable: true }
              - in: query
                name: include_co
                schema: { type: boolean, default: true }
              - in: query
                name: max_pairs
                schema: { type: integer, default: 8000 }
              - in: query
                name: max_nodes
                schema: { type: integer, default: 2000 }
              - in: query
                name: max_edges
                schema: { type: integer, default: 4000 }
              - in: query
                name: cache
                schema: { type: boolean, default: true }
              - in: query
                name: theme
                schema: { type: string, enum: [ light, dark ], default: light }
              - in: query
                name: title
                schema: { type: string, default: "Knowledge Graph (PyVis)" }
              - in: query
                name: debug
                schema: { type: boolean, default: false }
            responses:
                '200':
                    description: HTML interativo (PyVis)
                    content:
                        text/html: {}
