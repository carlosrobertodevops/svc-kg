openapi: 3.0.3
info:
  title: svc-kg
  version: "1.7.0"
  description: |
    Microserviço de Knowledge Graph (membros, facções, funções).
    - Backend: Supabase RPC (`get_graph_membros`) ou Postgres direto.
    - Cache: Redis (fallback memória).
    - Visualização PyVis (HTML interativo): `/v1/vis/pyvis`.
servers:
- url: /
tags:
- name: Health
  description: Endpoints de saúde do serviço.
- name: Debug
  description: Diagnóstico e configuração.
- name: Graph
  description: Endpoints que retornam grafo em JSON.
- name: Visualization
  description: Visualização interativa (HTML) do grafo.

paths:
  /live:
    get:
      tags: [ Health ]
      summary: Liveness
      description: Retorna 200 se o processo está de pé.
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveResponse'
              examples:
                default:
                  value: { status: "live", service: "svc-kg" }

  /ready:
    get:
      tags: [ Health ]
      summary: Readiness (checa DNS/Redis/backend)
      description: |
        Verifica DNS do Supabase (quando em modo supabase), Redis e backend (Supabase/Postgres).
      responses:
        "200":
          description: pronto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadyResponse'
              examples:
                ok:
                  value:
                    redis: true
                    backend: "supabase"
                    backend_ok: true
                    supabase_host: "supabase.seu-dominio.com"
                    dns_ok: true
        "503":
          description: dependências indisponíveis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadyResponse'
              examples:
                dns_fail:
                  value:
                    redis: true
                    backend: "supabase"
                    backend_ok: false
                    supabase_host: "supabase.seu-dominio.com"
                    dns_ok: false
                    error: "DNS fail for supabase.seu-dominio.com: [Errno -2] Name or service not known"

  /health:
    get:
      tags: [ Health ]
      summary: Health (estático)
      description: Informações estáticas e de cache.
      responses:
        "200":
          description: ok
          headers:
            Cache-Control:
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                default:
                  value:
                    status: ok
                    service: svc-kg
                    env: production
                    cache: redis
                    backend: supabase

  /debug/config:
    get:
      tags: [ Debug ]
      summary: Config (sanitizada)
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebugConfig'

  /v1/graph/membros:
    get:
      tags: [ Graph ]
      summary: Grafo (via et_graph_membros/get_graph_membros)
      parameters:
      - $ref: '#/components/parameters/faccao_id'
      - $ref: '#/components/parameters/include_co'
      - $ref: '#/components/parameters/max_pairs'
      - $ref: '#/components/parameters/max_nodes'
      - $ref: '#/components/parameters/max_edges'
      - $ref: '#/components/parameters/cache'
      responses:
        "200":
          description: ok
          headers:
            ETag:
              schema: { type: string }
            Cache-Control:
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphResponse'
              examples:
                pequena:
                  value:
                    nodes:
                    - { id: "1", label: "Alice", type: "membro", group: 10, size: 18 }
                    - { id: "10", label: "Facção X", type: "faccao", group: 10, size: 16 }
                    edges:
                    - { source: "1", target: "10", weight: 3.0, relation: "PERTENCE_A" }

  /graph/members:
    get:
      tags: [ Graph ]
      summary: (Compat) /v1/graph/membros com parâmetros p_*
      description: Endpoint compatível que aceita `p_faccao_id`, `p_include_co`, `p_max_pairs`.
      parameters:
      - name: p_faccao_id
        in: query
        required: false
        schema: { type: integer, format: int64, nullable: true }
        description: Filtra por facção (opcional).
      - name: p_include_co
        in: query
        required: false
        schema: { type: boolean, default: true }
        description: Inclui pares inferidos (CO_*).
      - name: p_max_pairs
        in: query
        required: false
        schema: { type: integer, default: 8000, minimum: 1, maximum: 200000 }
        description: Limite de pares inferidos.
      - $ref: '#/components/parameters/max_nodes'
      - $ref: '#/components/parameters/max_edges'
      - $ref: '#/components/parameters/cache'
      responses:
        "200":
          description: ok
          headers:
            ETag:
              schema: { type: string }
            Cache-Control:
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphResponse'

  /v1/nodes/{node_id}/neighbors:
    get:
      tags: [ Graph ]
      summary: Subgrafo (raio=1)
      parameters:
      - name: node_id
        in: path
        required: true
        schema: { type: string }
        description: ID do nó para obter vizinhos.
      - $ref: '#/components/parameters/include_co'
      - name: max_pairs
        in: query
        required: false
        schema: { type: integer, default: 3000, minimum: 1, maximum: 200000 }
        description: Limite de pares inferidos ao montar subgrafo.
      responses:
        "200":
          description: ok
          headers:
            ETag:
              schema: { type: string }
            Cache-Control:
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphResponse'

  /v1/vis/pyvis:
    get:
      tags: [ Visualization ]
      summary: Visualização PyVis (HTML) do grafo
      description: |
        Gera um HTML interativo (PyVis/vis.js) do grafo. Ideal para embutir em WebView (FlutterFlow) ou abrir no navegador.
      parameters:
      - $ref: '#/components/parameters/faccao_id'
      - $ref: '#/components/parameters/include_co'
      - $ref: '#/components/parameters/max_pairs'
      - name: theme
        in: query
        required: false
        schema: { type: string, enum: [ light, dark ], default: light }
        description: Tema do canvas (fundo claro/escuro).
      - name: arrows
        in: query
        required: false
        schema: { type: boolean, default: true }
        description: Mostra setas nas arestas (direcionado).
      - name: hierarchical
        in: query
        required: false
        schema: { type: boolean, default: false }
        description: Ativa layout hierárquico (physics desabilitado).
      - name: physics
        in: query
        required: false
        schema: { type: boolean, default: true }
        description: Ativa física do layout (arrasto/estabilização).
      - name: barnes_hut
        in: query
        required: false
        schema: { type: boolean, default: true }
        description: Usa Barnes-Hut como solver de física.
      - name: show_buttons
        in: query
        required: false
        schema: { type: boolean, default: true }
        description: Mostra painel de opções do PyVis (physics/interaction/layout).
      - name: title
        in: query
        required: false
        schema: { type: string, default: "Knowledge Graph" }
        description: Título para a toolbar embutida.
      - name: toolbar
        in: query
        required: false
        schema: { type: boolean, default: true }
        description: Mostra toolbar com Print/Reload.
      responses:
        "200":
          description: HTML interativo
          headers:
            Cache-Control:
              schema: { type: string }
            X-Content-Type-Options:
              schema: { type: string }
          content:
            text/html:
              schema:
                type: string
              examples:
                minimal:
                  value: "<!DOCTYPE html><html><head>...</head><body>...</body></html>"

components:
  parameters:
    faccao_id:
      name: faccao_id
      in: query
      required: false
      schema: { type: integer, format: int64, nullable: true }
      description: Filtra por facção (opcional). Se omitido, retorna o grafo completo (atenção ao volume).
    include_co:
      name: include_co
      in: query
      required: false
      schema: { type: boolean, default: true }
      description: Inclui pares inferidos (CO_*).
    max_pairs:
      name: max_pairs
      in: query
      required: false
      schema: { type: integer, default: 8000, minimum: 1, maximum: 200000 }
      description: Limite de pares inferidos nas arestas.
    max_nodes:
      name: max_nodes
      in: query
      required: false
      schema: { type: integer, default: 2000, minimum: 100, maximum: 20000 }
      description: Teto de nós na resposta (aplica truncamento preservando hubs).
    max_edges:
      name: max_edges
      in: query
      required: false
      schema: { type: integer, default: 4000, minimum: 100, maximum: 200000 }
      description: Teto de arestas na resposta (aplica truncamento por peso).
    cache:
      name: cache
      in: query
      required: false
      schema: { type: boolean, default: true }
      description: Usa cache (Redis / memória) para respostas idênticas por TTL.

  schemas:
    LiveResponse:
      type: object
      properties:
        status: { type: string, example: live }
        service: { type: string, example: svc-kg }
      additionalProperties: false

    ReadyResponse:
      type: object
      properties:
        redis: { type: boolean }
        backend: { type: string, example: supabase }
        backend_ok: { type: boolean }
        supabase_host: { type: string, nullable: true }
        dns_ok: { type: boolean, nullable: true }
        error: { type: string, nullable: true }
      additionalProperties: true

    HealthResponse:
      type: object
      properties:
        status: { type: string, example: ok }
        service: { type: string, example: svc-kg }
        env: { type: string, example: production }
        cache: { type: string, example: redis }
        backend: { type: string, example: supabase }
      additionalProperties: false

    DebugConfig:
      type: object
      properties:
        env: { type: string }
        port: { type: integer }
        backend_mode: { type: string, example: supabase }
        supabase_url_raw: { type: string }
        supabase_url: { type: string }
        has_anon_key: { type: boolean }
        has_service_key: { type: boolean }
        rpc_function: { type: string, example: get_graph_membros }
        has_database_url: { type: boolean }
        redis_enabled: { type: boolean }
        has_redis_url: { type: boolean }
      additionalProperties: false

    Node:
      type: object
      required: [ id, label, type ]
      properties:
        id: { type: string, example: "123" }
        label: { type: string, example: "Alice" }
        type: { type: string, example: "membro" }
        group: { type: integer, nullable: true, example: 10 }
        size: { type: number, format: float, nullable: true, example: 18.5 }

    Edge:
      type: object
      required: [ source, target ]
      properties:
        source: { type: string, example: "123" }
        target: { type: string, example: "456" }
        weight: { type: number, format: float, nullable: true, example: 3.0 }
        relation: { type: string, nullable: true, example: "PERTENCE_A" }

    GraphResponse:
      type: object
      required: [ nodes, edges ]
      properties:
        nodes:
          type: array
          items: { $ref: '#/components/schemas/Node' }
        edges:
          type: array
          items: { $ref: '#/components/schemas/Edge' }

    ErrorResponse:
      type: object
      properties:
        error: { type: string, example: internal_error }
        message: { type: string, nullable: true }
        status_code: { type: integer, nullable: true }
        path: { type: string, nullable: true }
      additionalProperties: false
