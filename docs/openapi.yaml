# =============================================================================
# Arquivo: docs/openapi.yaml
# Versão: v1.7.20
# Objetivo: Descrever a API pública do svc-kg
# Funções/métodos:
# - /v1/graph/membros: grafo normalizado
# - /visjs: HTML com vis-network
# - /pyvis: HTML com PyVis
# - /live, /health, /ready, /ops/status: sondas/status
# =============================================================================
openapi: 3.0.3
info:
  title: svc-kg
  version: "v1.7.20"
  description: |
    Serviço de Knowledge Graph com visualização em vis.js e PyVis.
servers:
  - url: /
paths:
  /live:
    get:
      summary: Liveness probe
      responses: { '200': { description: OK } }
  /health:
    get:
      summary: Health probe
      responses: { '200': { description: OK } }
  /ready:
    get:
      summary: Readiness probe
      responses: { '200': { description: OK } }
  /ops/status:
    get:
      summary: Status operacional
      responses: { '200': { description: OK } }
  /v1/graph/membros:
    get:
      summary: Grafo (nós e arestas) de membros/facções/funções
      description: |
        Retorna grafo normalizado para consumo por vis-network/PyVis.
        Cores aplicadas no cliente: **CV** vermelho, **PCC** azul escuro, **funções** amarelo.
      parameters:
        - in: query
          name: faccao_id
          schema: { type: integer, nullable: true }
        - in: query
          name: include_co
          schema: { type: boolean, default: true }
        - in: query
          name: max_pairs
          schema: { type: integer, default: 5000, minimum: 1, maximum: 100000 }
      responses:
        '200':
          description: Grafo normalizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        label: { type: string }
                        type: { type: string, enum: [membro, faccao, funcao] }
                        size: { type: number }
                        group: { nullable: true }
                  edges:
                    type: array
                    items:
                      type: object
                      properties:
                        from: { type: string }
                        to: { type: string }
                        relation: { type: string }
                        value: { type: number }
                        arrows: { type: string }
        '404': { description: Backend não encontrou RPC }
        '500': { description: Erro inesperado }
  /visjs:
    get:
      summary: HTML – vis-network
      description: |
        Renderiza a rede no navegador (arestas bem finas, física desligada após estabilizar, busca com destaque).
      parameters:
        - in: query
          name: faccao_id
          schema: { type: integer, nullable: true }
        - in: query
          name: include_co
          schema: { type: boolean, default: true }
        - in: query
          name: max_pairs
          schema: { type: integer, default: 5000, minimum: 1, maximum: 100000 }
        - in: query
          name: search
          schema: { type: string, nullable: true }
      responses:
        '200':
          description: HTML
          content: { text/html: { schema: { type: string } } }
  /pyvis:
    get:
      summary: HTML – PyVis
      description: |
        Usa PyVis para gerar a visualização. Arestas **muito finas**; física desligada após estabilização; busca com destaque.
      parameters:
        - in: query
          name: faccao_id
          schema: { type: integer, nullable: true }
        - in: query
          name: include_co
          schema: { type: boolean, default: true }
        - in: query
          name: max_pairs
          schema: { type: integer, default: 5000, minimum: 1, maximum: 100000 }
        - in: query
          name: search
          schema: { type: string, nullable: true }
      responses:
        '200':
          description: HTML
          content: { text/html: { schema: { type: string } } }
        '500': { description: Erro inesperado }
